/*
 * This file was auto-generated by speedy-antlr-tool v1.1.0
 *  https://github.com/amykyta3/speedy-antlr-tool
 */

#include "sa_kotlin_translator.h"


SA_KotlinTranslator::SA_KotlinTranslator(speedy_antlr::Translator *translator) {
    this->translator = translator;
}

SA_KotlinTranslator::~SA_KotlinTranslator() {
    Py_XDECREF(KotlinFileContext_cls);
    Py_XDECREF(ScriptContext_cls);
    Py_XDECREF(ShebangLineContext_cls);
    Py_XDECREF(FileAnnotationContext_cls);
    Py_XDECREF(PackageHeaderContext_cls);
    Py_XDECREF(ImportListContext_cls);
    Py_XDECREF(ImportHeaderContext_cls);
    Py_XDECREF(ImportAliasContext_cls);
    Py_XDECREF(TopLevelObjectContext_cls);
    Py_XDECREF(TypeAliasContext_cls);
    Py_XDECREF(DeclarationContext_cls);
    Py_XDECREF(ClassDeclarationContext_cls);
    Py_XDECREF(PrimaryConstructorContext_cls);
    Py_XDECREF(ClassBodyContext_cls);
    Py_XDECREF(ClassParametersContext_cls);
    Py_XDECREF(ClassParameterContext_cls);
    Py_XDECREF(DelegationSpecifiersContext_cls);
    Py_XDECREF(DelegationSpecifierContext_cls);
    Py_XDECREF(ConstructorInvocationContext_cls);
    Py_XDECREF(AnnotatedDelegationSpecifierContext_cls);
    Py_XDECREF(ExplicitDelegationContext_cls);
    Py_XDECREF(TypeParametersContext_cls);
    Py_XDECREF(TypeParameterContext_cls);
    Py_XDECREF(TypeConstraintsContext_cls);
    Py_XDECREF(TypeConstraintContext_cls);
    Py_XDECREF(ClassMemberDeclarationsContext_cls);
    Py_XDECREF(ClassMemberDeclarationContext_cls);
    Py_XDECREF(AnonymousInitializerContext_cls);
    Py_XDECREF(CompanionObjectContext_cls);
    Py_XDECREF(FunctionValueParametersContext_cls);
    Py_XDECREF(FunctionValueParameterContext_cls);
    Py_XDECREF(FunctionDeclarationContext_cls);
    Py_XDECREF(FunctionBodyContext_cls);
    Py_XDECREF(VariableDeclarationContext_cls);
    Py_XDECREF(MultiVariableDeclarationContext_cls);
    Py_XDECREF(PropertyDeclarationContext_cls);
    Py_XDECREF(PropertyDelegateContext_cls);
    Py_XDECREF(GetterContext_cls);
    Py_XDECREF(SetterContext_cls);
    Py_XDECREF(ParametersWithOptionalTypeContext_cls);
    Py_XDECREF(FunctionValueParameterWithOptionalTypeContext_cls);
    Py_XDECREF(ParameterWithOptionalTypeContext_cls);
    Py_XDECREF(ParameterContext_cls);
    Py_XDECREF(ObjectDeclarationContext_cls);
    Py_XDECREF(SecondaryConstructorContext_cls);
    Py_XDECREF(ConstructorDelegationCallContext_cls);
    Py_XDECREF(EnumClassBodyContext_cls);
    Py_XDECREF(EnumEntriesContext_cls);
    Py_XDECREF(EnumEntryContext_cls);
    Py_XDECREF(TypeContext_cls);
    Py_XDECREF(TypeReferenceContext_cls);
    Py_XDECREF(NullableTypeContext_cls);
    Py_XDECREF(QuestContext_cls);
    Py_XDECREF(UserTypeContext_cls);
    Py_XDECREF(SimpleUserTypeContext_cls);
    Py_XDECREF(TypeProjectionContext_cls);
    Py_XDECREF(TypeProjectionModifiersContext_cls);
    Py_XDECREF(TypeProjectionModifierContext_cls);
    Py_XDECREF(FunctionTypeContext_cls);
    Py_XDECREF(FunctionTypeParametersContext_cls);
    Py_XDECREF(ParenthesizedTypeContext_cls);
    Py_XDECREF(ReceiverTypeContext_cls);
    Py_XDECREF(ParenthesizedUserTypeContext_cls);
    Py_XDECREF(StatementsContext_cls);
    Py_XDECREF(StatementContext_cls);
    Py_XDECREF(LabelContext_cls);
    Py_XDECREF(ControlStructureBodyContext_cls);
    Py_XDECREF(BlockContext_cls);
    Py_XDECREF(LoopStatementContext_cls);
    Py_XDECREF(ForStatementContext_cls);
    Py_XDECREF(WhileStatementContext_cls);
    Py_XDECREF(DoWhileStatementContext_cls);
    Py_XDECREF(AssignmentContext_cls);
    Py_XDECREF(SemiContext_cls);
    Py_XDECREF(SemisContext_cls);
    Py_XDECREF(ExpressionContext_cls);
    Py_XDECREF(DisjunctionContext_cls);
    Py_XDECREF(ConjunctionContext_cls);
    Py_XDECREF(EqualityContext_cls);
    Py_XDECREF(ComparisonContext_cls);
    Py_XDECREF(GenericCallLikeComparisonContext_cls);
    Py_XDECREF(InfixOperationContext_cls);
    Py_XDECREF(ElvisExpressionContext_cls);
    Py_XDECREF(ElvisContext_cls);
    Py_XDECREF(InfixFunctionCallContext_cls);
    Py_XDECREF(RangeExpressionContext_cls);
    Py_XDECREF(AdditiveExpressionContext_cls);
    Py_XDECREF(MultiplicativeExpressionContext_cls);
    Py_XDECREF(AsExpressionContext_cls);
    Py_XDECREF(PrefixUnaryExpressionContext_cls);
    Py_XDECREF(UnaryPrefixContext_cls);
    Py_XDECREF(PostfixUnaryExpressionContext_cls);
    Py_XDECREF(PostfixUnarySuffixContext_cls);
    Py_XDECREF(DirectlyAssignableExpressionContext_cls);
    Py_XDECREF(ParenthesizedDirectlyAssignableExpressionContext_cls);
    Py_XDECREF(AssignableExpressionContext_cls);
    Py_XDECREF(ParenthesizedAssignableExpressionContext_cls);
    Py_XDECREF(AssignableSuffixContext_cls);
    Py_XDECREF(IndexingSuffixContext_cls);
    Py_XDECREF(NavigationSuffixContext_cls);
    Py_XDECREF(CallSuffixContext_cls);
    Py_XDECREF(AnnotatedLambdaContext_cls);
    Py_XDECREF(TypeArgumentsContext_cls);
    Py_XDECREF(ValueArgumentsContext_cls);
    Py_XDECREF(ValueArgumentContext_cls);
    Py_XDECREF(PrimaryExpressionContext_cls);
    Py_XDECREF(ParenthesizedExpressionContext_cls);
    Py_XDECREF(CollectionLiteralContext_cls);
    Py_XDECREF(LiteralConstantContext_cls);
    Py_XDECREF(StringLiteralContext_cls);
    Py_XDECREF(LineStringLiteralContext_cls);
    Py_XDECREF(MultiLineStringLiteralContext_cls);
    Py_XDECREF(LineStringContentContext_cls);
    Py_XDECREF(LineStringExpressionContext_cls);
    Py_XDECREF(MultiLineStringContentContext_cls);
    Py_XDECREF(MultiLineStringExpressionContext_cls);
    Py_XDECREF(LambdaLiteralContext_cls);
    Py_XDECREF(LambdaParametersContext_cls);
    Py_XDECREF(LambdaParameterContext_cls);
    Py_XDECREF(AnonymousFunctionContext_cls);
    Py_XDECREF(FunctionLiteralContext_cls);
    Py_XDECREF(ObjectLiteralContext_cls);
    Py_XDECREF(ThisExpressionContext_cls);
    Py_XDECREF(SuperExpressionContext_cls);
    Py_XDECREF(IfExpressionContext_cls);
    Py_XDECREF(WhenSubjectContext_cls);
    Py_XDECREF(WhenExpressionContext_cls);
    Py_XDECREF(WhenEntryContext_cls);
    Py_XDECREF(WhenConditionContext_cls);
    Py_XDECREF(RangeTestContext_cls);
    Py_XDECREF(TypeTestContext_cls);
    Py_XDECREF(TryExpressionContext_cls);
    Py_XDECREF(CatchBlockContext_cls);
    Py_XDECREF(FinallyBlockContext_cls);
    Py_XDECREF(JumpExpressionContext_cls);
    Py_XDECREF(CallableReferenceContext_cls);
    Py_XDECREF(AssignmentAndOperatorContext_cls);
    Py_XDECREF(EqualityOperatorContext_cls);
    Py_XDECREF(ComparisonOperatorContext_cls);
    Py_XDECREF(InOperatorContext_cls);
    Py_XDECREF(IsOperatorContext_cls);
    Py_XDECREF(AdditiveOperatorContext_cls);
    Py_XDECREF(MultiplicativeOperatorContext_cls);
    Py_XDECREF(AsOperatorContext_cls);
    Py_XDECREF(PrefixUnaryOperatorContext_cls);
    Py_XDECREF(PostfixUnaryOperatorContext_cls);
    Py_XDECREF(ExclContext_cls);
    Py_XDECREF(MemberAccessOperatorContext_cls);
    Py_XDECREF(SafeNavContext_cls);
    Py_XDECREF(ModifiersContext_cls);
    Py_XDECREF(ParameterModifiersContext_cls);
    Py_XDECREF(ModifierContext_cls);
    Py_XDECREF(TypeModifiersContext_cls);
    Py_XDECREF(TypeModifierContext_cls);
    Py_XDECREF(ClassModifierContext_cls);
    Py_XDECREF(MemberModifierContext_cls);
    Py_XDECREF(VisibilityModifierContext_cls);
    Py_XDECREF(VarianceModifierContext_cls);
    Py_XDECREF(TypeParameterModifiersContext_cls);
    Py_XDECREF(TypeParameterModifierContext_cls);
    Py_XDECREF(FunctionModifierContext_cls);
    Py_XDECREF(PropertyModifierContext_cls);
    Py_XDECREF(InheritanceModifierContext_cls);
    Py_XDECREF(ParameterModifierContext_cls);
    Py_XDECREF(ReificationModifierContext_cls);
    Py_XDECREF(PlatformModifierContext_cls);
    Py_XDECREF(AnnotationContext_cls);
    Py_XDECREF(SingleAnnotationContext_cls);
    Py_XDECREF(MultiAnnotationContext_cls);
    Py_XDECREF(AnnotationUseSiteTargetContext_cls);
    Py_XDECREF(UnescapedAnnotationContext_cls);
    Py_XDECREF(SimpleIdentifierContext_cls);
    Py_XDECREF(IdentifierContext_cls);
}


antlrcpp::Any SA_KotlinTranslator::visitKotlinFile(KotlinParser::KotlinFileContext *ctx){
    if(!KotlinFileContext_cls) KotlinFileContext_cls = PyObject_GetAttrString(translator->parser_cls, "KotlinFileContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, KotlinFileContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_KotlinTranslator::visitScript(KotlinParser::ScriptContext *ctx){
    if(!ScriptContext_cls) ScriptContext_cls = PyObject_GetAttrString(translator->parser_cls, "ScriptContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, ScriptContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_KotlinTranslator::visitShebangLine(KotlinParser::ShebangLineContext *ctx){
    if(!ShebangLineContext_cls) ShebangLineContext_cls = PyObject_GetAttrString(translator->parser_cls, "ShebangLineContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, ShebangLineContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_KotlinTranslator::visitFileAnnotation(KotlinParser::FileAnnotationContext *ctx){
    if(!FileAnnotationContext_cls) FileAnnotationContext_cls = PyObject_GetAttrString(translator->parser_cls, "FileAnnotationContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, FileAnnotationContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_KotlinTranslator::visitPackageHeader(KotlinParser::PackageHeaderContext *ctx){
    if(!PackageHeaderContext_cls) PackageHeaderContext_cls = PyObject_GetAttrString(translator->parser_cls, "PackageHeaderContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, PackageHeaderContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_KotlinTranslator::visitImportList(KotlinParser::ImportListContext *ctx){
    if(!ImportListContext_cls) ImportListContext_cls = PyObject_GetAttrString(translator->parser_cls, "ImportListContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, ImportListContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_KotlinTranslator::visitImportHeader(KotlinParser::ImportHeaderContext *ctx){
    if(!ImportHeaderContext_cls) ImportHeaderContext_cls = PyObject_GetAttrString(translator->parser_cls, "ImportHeaderContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, ImportHeaderContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_KotlinTranslator::visitImportAlias(KotlinParser::ImportAliasContext *ctx){
    if(!ImportAliasContext_cls) ImportAliasContext_cls = PyObject_GetAttrString(translator->parser_cls, "ImportAliasContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, ImportAliasContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_KotlinTranslator::visitTopLevelObject(KotlinParser::TopLevelObjectContext *ctx){
    if(!TopLevelObjectContext_cls) TopLevelObjectContext_cls = PyObject_GetAttrString(translator->parser_cls, "TopLevelObjectContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, TopLevelObjectContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_KotlinTranslator::visitTypeAlias(KotlinParser::TypeAliasContext *ctx){
    if(!TypeAliasContext_cls) TypeAliasContext_cls = PyObject_GetAttrString(translator->parser_cls, "TypeAliasContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, TypeAliasContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_KotlinTranslator::visitDeclaration(KotlinParser::DeclarationContext *ctx){
    if(!DeclarationContext_cls) DeclarationContext_cls = PyObject_GetAttrString(translator->parser_cls, "DeclarationContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, DeclarationContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_KotlinTranslator::visitClassDeclaration(KotlinParser::ClassDeclarationContext *ctx){
    if(!ClassDeclarationContext_cls) ClassDeclarationContext_cls = PyObject_GetAttrString(translator->parser_cls, "ClassDeclarationContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, ClassDeclarationContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_KotlinTranslator::visitPrimaryConstructor(KotlinParser::PrimaryConstructorContext *ctx){
    if(!PrimaryConstructorContext_cls) PrimaryConstructorContext_cls = PyObject_GetAttrString(translator->parser_cls, "PrimaryConstructorContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, PrimaryConstructorContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_KotlinTranslator::visitClassBody(KotlinParser::ClassBodyContext *ctx){
    if(!ClassBodyContext_cls) ClassBodyContext_cls = PyObject_GetAttrString(translator->parser_cls, "ClassBodyContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, ClassBodyContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_KotlinTranslator::visitClassParameters(KotlinParser::ClassParametersContext *ctx){
    if(!ClassParametersContext_cls) ClassParametersContext_cls = PyObject_GetAttrString(translator->parser_cls, "ClassParametersContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, ClassParametersContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_KotlinTranslator::visitClassParameter(KotlinParser::ClassParameterContext *ctx){
    if(!ClassParameterContext_cls) ClassParameterContext_cls = PyObject_GetAttrString(translator->parser_cls, "ClassParameterContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, ClassParameterContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_KotlinTranslator::visitDelegationSpecifiers(KotlinParser::DelegationSpecifiersContext *ctx){
    if(!DelegationSpecifiersContext_cls) DelegationSpecifiersContext_cls = PyObject_GetAttrString(translator->parser_cls, "DelegationSpecifiersContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, DelegationSpecifiersContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_KotlinTranslator::visitDelegationSpecifier(KotlinParser::DelegationSpecifierContext *ctx){
    if(!DelegationSpecifierContext_cls) DelegationSpecifierContext_cls = PyObject_GetAttrString(translator->parser_cls, "DelegationSpecifierContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, DelegationSpecifierContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_KotlinTranslator::visitConstructorInvocation(KotlinParser::ConstructorInvocationContext *ctx){
    if(!ConstructorInvocationContext_cls) ConstructorInvocationContext_cls = PyObject_GetAttrString(translator->parser_cls, "ConstructorInvocationContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, ConstructorInvocationContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_KotlinTranslator::visitAnnotatedDelegationSpecifier(KotlinParser::AnnotatedDelegationSpecifierContext *ctx){
    if(!AnnotatedDelegationSpecifierContext_cls) AnnotatedDelegationSpecifierContext_cls = PyObject_GetAttrString(translator->parser_cls, "AnnotatedDelegationSpecifierContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, AnnotatedDelegationSpecifierContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_KotlinTranslator::visitExplicitDelegation(KotlinParser::ExplicitDelegationContext *ctx){
    if(!ExplicitDelegationContext_cls) ExplicitDelegationContext_cls = PyObject_GetAttrString(translator->parser_cls, "ExplicitDelegationContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, ExplicitDelegationContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_KotlinTranslator::visitTypeParameters(KotlinParser::TypeParametersContext *ctx){
    if(!TypeParametersContext_cls) TypeParametersContext_cls = PyObject_GetAttrString(translator->parser_cls, "TypeParametersContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, TypeParametersContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_KotlinTranslator::visitTypeParameter(KotlinParser::TypeParameterContext *ctx){
    if(!TypeParameterContext_cls) TypeParameterContext_cls = PyObject_GetAttrString(translator->parser_cls, "TypeParameterContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, TypeParameterContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_KotlinTranslator::visitTypeConstraints(KotlinParser::TypeConstraintsContext *ctx){
    if(!TypeConstraintsContext_cls) TypeConstraintsContext_cls = PyObject_GetAttrString(translator->parser_cls, "TypeConstraintsContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, TypeConstraintsContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_KotlinTranslator::visitTypeConstraint(KotlinParser::TypeConstraintContext *ctx){
    if(!TypeConstraintContext_cls) TypeConstraintContext_cls = PyObject_GetAttrString(translator->parser_cls, "TypeConstraintContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, TypeConstraintContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_KotlinTranslator::visitClassMemberDeclarations(KotlinParser::ClassMemberDeclarationsContext *ctx){
    if(!ClassMemberDeclarationsContext_cls) ClassMemberDeclarationsContext_cls = PyObject_GetAttrString(translator->parser_cls, "ClassMemberDeclarationsContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, ClassMemberDeclarationsContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_KotlinTranslator::visitClassMemberDeclaration(KotlinParser::ClassMemberDeclarationContext *ctx){
    if(!ClassMemberDeclarationContext_cls) ClassMemberDeclarationContext_cls = PyObject_GetAttrString(translator->parser_cls, "ClassMemberDeclarationContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, ClassMemberDeclarationContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_KotlinTranslator::visitAnonymousInitializer(KotlinParser::AnonymousInitializerContext *ctx){
    if(!AnonymousInitializerContext_cls) AnonymousInitializerContext_cls = PyObject_GetAttrString(translator->parser_cls, "AnonymousInitializerContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, AnonymousInitializerContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_KotlinTranslator::visitCompanionObject(KotlinParser::CompanionObjectContext *ctx){
    if(!CompanionObjectContext_cls) CompanionObjectContext_cls = PyObject_GetAttrString(translator->parser_cls, "CompanionObjectContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, CompanionObjectContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_KotlinTranslator::visitFunctionValueParameters(KotlinParser::FunctionValueParametersContext *ctx){
    if(!FunctionValueParametersContext_cls) FunctionValueParametersContext_cls = PyObject_GetAttrString(translator->parser_cls, "FunctionValueParametersContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, FunctionValueParametersContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_KotlinTranslator::visitFunctionValueParameter(KotlinParser::FunctionValueParameterContext *ctx){
    if(!FunctionValueParameterContext_cls) FunctionValueParameterContext_cls = PyObject_GetAttrString(translator->parser_cls, "FunctionValueParameterContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, FunctionValueParameterContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_KotlinTranslator::visitFunctionDeclaration(KotlinParser::FunctionDeclarationContext *ctx){
    if(!FunctionDeclarationContext_cls) FunctionDeclarationContext_cls = PyObject_GetAttrString(translator->parser_cls, "FunctionDeclarationContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, FunctionDeclarationContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_KotlinTranslator::visitFunctionBody(KotlinParser::FunctionBodyContext *ctx){
    if(!FunctionBodyContext_cls) FunctionBodyContext_cls = PyObject_GetAttrString(translator->parser_cls, "FunctionBodyContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, FunctionBodyContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_KotlinTranslator::visitVariableDeclaration(KotlinParser::VariableDeclarationContext *ctx){
    if(!VariableDeclarationContext_cls) VariableDeclarationContext_cls = PyObject_GetAttrString(translator->parser_cls, "VariableDeclarationContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, VariableDeclarationContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_KotlinTranslator::visitMultiVariableDeclaration(KotlinParser::MultiVariableDeclarationContext *ctx){
    if(!MultiVariableDeclarationContext_cls) MultiVariableDeclarationContext_cls = PyObject_GetAttrString(translator->parser_cls, "MultiVariableDeclarationContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, MultiVariableDeclarationContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_KotlinTranslator::visitPropertyDeclaration(KotlinParser::PropertyDeclarationContext *ctx){
    if(!PropertyDeclarationContext_cls) PropertyDeclarationContext_cls = PyObject_GetAttrString(translator->parser_cls, "PropertyDeclarationContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, PropertyDeclarationContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_KotlinTranslator::visitPropertyDelegate(KotlinParser::PropertyDelegateContext *ctx){
    if(!PropertyDelegateContext_cls) PropertyDelegateContext_cls = PyObject_GetAttrString(translator->parser_cls, "PropertyDelegateContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, PropertyDelegateContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_KotlinTranslator::visitGetter(KotlinParser::GetterContext *ctx){
    if(!GetterContext_cls) GetterContext_cls = PyObject_GetAttrString(translator->parser_cls, "GetterContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, GetterContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_KotlinTranslator::visitSetter(KotlinParser::SetterContext *ctx){
    if(!SetterContext_cls) SetterContext_cls = PyObject_GetAttrString(translator->parser_cls, "SetterContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, SetterContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_KotlinTranslator::visitParametersWithOptionalType(KotlinParser::ParametersWithOptionalTypeContext *ctx){
    if(!ParametersWithOptionalTypeContext_cls) ParametersWithOptionalTypeContext_cls = PyObject_GetAttrString(translator->parser_cls, "ParametersWithOptionalTypeContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, ParametersWithOptionalTypeContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_KotlinTranslator::visitFunctionValueParameterWithOptionalType(KotlinParser::FunctionValueParameterWithOptionalTypeContext *ctx){
    if(!FunctionValueParameterWithOptionalTypeContext_cls) FunctionValueParameterWithOptionalTypeContext_cls = PyObject_GetAttrString(translator->parser_cls, "FunctionValueParameterWithOptionalTypeContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, FunctionValueParameterWithOptionalTypeContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_KotlinTranslator::visitParameterWithOptionalType(KotlinParser::ParameterWithOptionalTypeContext *ctx){
    if(!ParameterWithOptionalTypeContext_cls) ParameterWithOptionalTypeContext_cls = PyObject_GetAttrString(translator->parser_cls, "ParameterWithOptionalTypeContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, ParameterWithOptionalTypeContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_KotlinTranslator::visitParameter(KotlinParser::ParameterContext *ctx){
    if(!ParameterContext_cls) ParameterContext_cls = PyObject_GetAttrString(translator->parser_cls, "ParameterContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, ParameterContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_KotlinTranslator::visitObjectDeclaration(KotlinParser::ObjectDeclarationContext *ctx){
    if(!ObjectDeclarationContext_cls) ObjectDeclarationContext_cls = PyObject_GetAttrString(translator->parser_cls, "ObjectDeclarationContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, ObjectDeclarationContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_KotlinTranslator::visitSecondaryConstructor(KotlinParser::SecondaryConstructorContext *ctx){
    if(!SecondaryConstructorContext_cls) SecondaryConstructorContext_cls = PyObject_GetAttrString(translator->parser_cls, "SecondaryConstructorContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, SecondaryConstructorContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_KotlinTranslator::visitConstructorDelegationCall(KotlinParser::ConstructorDelegationCallContext *ctx){
    if(!ConstructorDelegationCallContext_cls) ConstructorDelegationCallContext_cls = PyObject_GetAttrString(translator->parser_cls, "ConstructorDelegationCallContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, ConstructorDelegationCallContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_KotlinTranslator::visitEnumClassBody(KotlinParser::EnumClassBodyContext *ctx){
    if(!EnumClassBodyContext_cls) EnumClassBodyContext_cls = PyObject_GetAttrString(translator->parser_cls, "EnumClassBodyContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, EnumClassBodyContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_KotlinTranslator::visitEnumEntries(KotlinParser::EnumEntriesContext *ctx){
    if(!EnumEntriesContext_cls) EnumEntriesContext_cls = PyObject_GetAttrString(translator->parser_cls, "EnumEntriesContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, EnumEntriesContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_KotlinTranslator::visitEnumEntry(KotlinParser::EnumEntryContext *ctx){
    if(!EnumEntryContext_cls) EnumEntryContext_cls = PyObject_GetAttrString(translator->parser_cls, "EnumEntryContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, EnumEntryContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_KotlinTranslator::visitType(KotlinParser::TypeContext *ctx){
    if(!TypeContext_cls) TypeContext_cls = PyObject_GetAttrString(translator->parser_cls, "TypeContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, TypeContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_KotlinTranslator::visitTypeReference(KotlinParser::TypeReferenceContext *ctx){
    if(!TypeReferenceContext_cls) TypeReferenceContext_cls = PyObject_GetAttrString(translator->parser_cls, "TypeReferenceContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, TypeReferenceContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_KotlinTranslator::visitNullableType(KotlinParser::NullableTypeContext *ctx){
    if(!NullableTypeContext_cls) NullableTypeContext_cls = PyObject_GetAttrString(translator->parser_cls, "NullableTypeContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, NullableTypeContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_KotlinTranslator::visitQuest(KotlinParser::QuestContext *ctx){
    if(!QuestContext_cls) QuestContext_cls = PyObject_GetAttrString(translator->parser_cls, "QuestContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, QuestContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_KotlinTranslator::visitUserType(KotlinParser::UserTypeContext *ctx){
    if(!UserTypeContext_cls) UserTypeContext_cls = PyObject_GetAttrString(translator->parser_cls, "UserTypeContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, UserTypeContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_KotlinTranslator::visitSimpleUserType(KotlinParser::SimpleUserTypeContext *ctx){
    if(!SimpleUserTypeContext_cls) SimpleUserTypeContext_cls = PyObject_GetAttrString(translator->parser_cls, "SimpleUserTypeContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, SimpleUserTypeContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_KotlinTranslator::visitTypeProjection(KotlinParser::TypeProjectionContext *ctx){
    if(!TypeProjectionContext_cls) TypeProjectionContext_cls = PyObject_GetAttrString(translator->parser_cls, "TypeProjectionContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, TypeProjectionContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_KotlinTranslator::visitTypeProjectionModifiers(KotlinParser::TypeProjectionModifiersContext *ctx){
    if(!TypeProjectionModifiersContext_cls) TypeProjectionModifiersContext_cls = PyObject_GetAttrString(translator->parser_cls, "TypeProjectionModifiersContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, TypeProjectionModifiersContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_KotlinTranslator::visitTypeProjectionModifier(KotlinParser::TypeProjectionModifierContext *ctx){
    if(!TypeProjectionModifierContext_cls) TypeProjectionModifierContext_cls = PyObject_GetAttrString(translator->parser_cls, "TypeProjectionModifierContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, TypeProjectionModifierContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_KotlinTranslator::visitFunctionType(KotlinParser::FunctionTypeContext *ctx){
    if(!FunctionTypeContext_cls) FunctionTypeContext_cls = PyObject_GetAttrString(translator->parser_cls, "FunctionTypeContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, FunctionTypeContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_KotlinTranslator::visitFunctionTypeParameters(KotlinParser::FunctionTypeParametersContext *ctx){
    if(!FunctionTypeParametersContext_cls) FunctionTypeParametersContext_cls = PyObject_GetAttrString(translator->parser_cls, "FunctionTypeParametersContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, FunctionTypeParametersContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_KotlinTranslator::visitParenthesizedType(KotlinParser::ParenthesizedTypeContext *ctx){
    if(!ParenthesizedTypeContext_cls) ParenthesizedTypeContext_cls = PyObject_GetAttrString(translator->parser_cls, "ParenthesizedTypeContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, ParenthesizedTypeContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_KotlinTranslator::visitReceiverType(KotlinParser::ReceiverTypeContext *ctx){
    if(!ReceiverTypeContext_cls) ReceiverTypeContext_cls = PyObject_GetAttrString(translator->parser_cls, "ReceiverTypeContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, ReceiverTypeContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_KotlinTranslator::visitParenthesizedUserType(KotlinParser::ParenthesizedUserTypeContext *ctx){
    if(!ParenthesizedUserTypeContext_cls) ParenthesizedUserTypeContext_cls = PyObject_GetAttrString(translator->parser_cls, "ParenthesizedUserTypeContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, ParenthesizedUserTypeContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_KotlinTranslator::visitStatements(KotlinParser::StatementsContext *ctx){
    if(!StatementsContext_cls) StatementsContext_cls = PyObject_GetAttrString(translator->parser_cls, "StatementsContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, StatementsContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_KotlinTranslator::visitStatement(KotlinParser::StatementContext *ctx){
    if(!StatementContext_cls) StatementContext_cls = PyObject_GetAttrString(translator->parser_cls, "StatementContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, StatementContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_KotlinTranslator::visitLabel(KotlinParser::LabelContext *ctx){
    if(!LabelContext_cls) LabelContext_cls = PyObject_GetAttrString(translator->parser_cls, "LabelContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, LabelContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_KotlinTranslator::visitControlStructureBody(KotlinParser::ControlStructureBodyContext *ctx){
    if(!ControlStructureBodyContext_cls) ControlStructureBodyContext_cls = PyObject_GetAttrString(translator->parser_cls, "ControlStructureBodyContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, ControlStructureBodyContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_KotlinTranslator::visitBlock(KotlinParser::BlockContext *ctx){
    if(!BlockContext_cls) BlockContext_cls = PyObject_GetAttrString(translator->parser_cls, "BlockContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, BlockContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_KotlinTranslator::visitLoopStatement(KotlinParser::LoopStatementContext *ctx){
    if(!LoopStatementContext_cls) LoopStatementContext_cls = PyObject_GetAttrString(translator->parser_cls, "LoopStatementContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, LoopStatementContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_KotlinTranslator::visitForStatement(KotlinParser::ForStatementContext *ctx){
    if(!ForStatementContext_cls) ForStatementContext_cls = PyObject_GetAttrString(translator->parser_cls, "ForStatementContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, ForStatementContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_KotlinTranslator::visitWhileStatement(KotlinParser::WhileStatementContext *ctx){
    if(!WhileStatementContext_cls) WhileStatementContext_cls = PyObject_GetAttrString(translator->parser_cls, "WhileStatementContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, WhileStatementContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_KotlinTranslator::visitDoWhileStatement(KotlinParser::DoWhileStatementContext *ctx){
    if(!DoWhileStatementContext_cls) DoWhileStatementContext_cls = PyObject_GetAttrString(translator->parser_cls, "DoWhileStatementContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, DoWhileStatementContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_KotlinTranslator::visitAssignment(KotlinParser::AssignmentContext *ctx){
    if(!AssignmentContext_cls) AssignmentContext_cls = PyObject_GetAttrString(translator->parser_cls, "AssignmentContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, AssignmentContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_KotlinTranslator::visitSemi(KotlinParser::SemiContext *ctx){
    if(!SemiContext_cls) SemiContext_cls = PyObject_GetAttrString(translator->parser_cls, "SemiContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, SemiContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_KotlinTranslator::visitSemis(KotlinParser::SemisContext *ctx){
    if(!SemisContext_cls) SemisContext_cls = PyObject_GetAttrString(translator->parser_cls, "SemisContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, SemisContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_KotlinTranslator::visitExpression(KotlinParser::ExpressionContext *ctx){
    if(!ExpressionContext_cls) ExpressionContext_cls = PyObject_GetAttrString(translator->parser_cls, "ExpressionContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, ExpressionContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_KotlinTranslator::visitDisjunction(KotlinParser::DisjunctionContext *ctx){
    if(!DisjunctionContext_cls) DisjunctionContext_cls = PyObject_GetAttrString(translator->parser_cls, "DisjunctionContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, DisjunctionContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_KotlinTranslator::visitConjunction(KotlinParser::ConjunctionContext *ctx){
    if(!ConjunctionContext_cls) ConjunctionContext_cls = PyObject_GetAttrString(translator->parser_cls, "ConjunctionContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, ConjunctionContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_KotlinTranslator::visitEquality(KotlinParser::EqualityContext *ctx){
    if(!EqualityContext_cls) EqualityContext_cls = PyObject_GetAttrString(translator->parser_cls, "EqualityContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, EqualityContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_KotlinTranslator::visitComparison(KotlinParser::ComparisonContext *ctx){
    if(!ComparisonContext_cls) ComparisonContext_cls = PyObject_GetAttrString(translator->parser_cls, "ComparisonContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, ComparisonContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_KotlinTranslator::visitGenericCallLikeComparison(KotlinParser::GenericCallLikeComparisonContext *ctx){
    if(!GenericCallLikeComparisonContext_cls) GenericCallLikeComparisonContext_cls = PyObject_GetAttrString(translator->parser_cls, "GenericCallLikeComparisonContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, GenericCallLikeComparisonContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_KotlinTranslator::visitInfixOperation(KotlinParser::InfixOperationContext *ctx){
    if(!InfixOperationContext_cls) InfixOperationContext_cls = PyObject_GetAttrString(translator->parser_cls, "InfixOperationContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, InfixOperationContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_KotlinTranslator::visitElvisExpression(KotlinParser::ElvisExpressionContext *ctx){
    if(!ElvisExpressionContext_cls) ElvisExpressionContext_cls = PyObject_GetAttrString(translator->parser_cls, "ElvisExpressionContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, ElvisExpressionContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_KotlinTranslator::visitElvis(KotlinParser::ElvisContext *ctx){
    if(!ElvisContext_cls) ElvisContext_cls = PyObject_GetAttrString(translator->parser_cls, "ElvisContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, ElvisContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_KotlinTranslator::visitInfixFunctionCall(KotlinParser::InfixFunctionCallContext *ctx){
    if(!InfixFunctionCallContext_cls) InfixFunctionCallContext_cls = PyObject_GetAttrString(translator->parser_cls, "InfixFunctionCallContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, InfixFunctionCallContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_KotlinTranslator::visitRangeExpression(KotlinParser::RangeExpressionContext *ctx){
    if(!RangeExpressionContext_cls) RangeExpressionContext_cls = PyObject_GetAttrString(translator->parser_cls, "RangeExpressionContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, RangeExpressionContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_KotlinTranslator::visitAdditiveExpression(KotlinParser::AdditiveExpressionContext *ctx){
    if(!AdditiveExpressionContext_cls) AdditiveExpressionContext_cls = PyObject_GetAttrString(translator->parser_cls, "AdditiveExpressionContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, AdditiveExpressionContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_KotlinTranslator::visitMultiplicativeExpression(KotlinParser::MultiplicativeExpressionContext *ctx){
    if(!MultiplicativeExpressionContext_cls) MultiplicativeExpressionContext_cls = PyObject_GetAttrString(translator->parser_cls, "MultiplicativeExpressionContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, MultiplicativeExpressionContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_KotlinTranslator::visitAsExpression(KotlinParser::AsExpressionContext *ctx){
    if(!AsExpressionContext_cls) AsExpressionContext_cls = PyObject_GetAttrString(translator->parser_cls, "AsExpressionContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, AsExpressionContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_KotlinTranslator::visitPrefixUnaryExpression(KotlinParser::PrefixUnaryExpressionContext *ctx){
    if(!PrefixUnaryExpressionContext_cls) PrefixUnaryExpressionContext_cls = PyObject_GetAttrString(translator->parser_cls, "PrefixUnaryExpressionContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, PrefixUnaryExpressionContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_KotlinTranslator::visitUnaryPrefix(KotlinParser::UnaryPrefixContext *ctx){
    if(!UnaryPrefixContext_cls) UnaryPrefixContext_cls = PyObject_GetAttrString(translator->parser_cls, "UnaryPrefixContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, UnaryPrefixContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_KotlinTranslator::visitPostfixUnaryExpression(KotlinParser::PostfixUnaryExpressionContext *ctx){
    if(!PostfixUnaryExpressionContext_cls) PostfixUnaryExpressionContext_cls = PyObject_GetAttrString(translator->parser_cls, "PostfixUnaryExpressionContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, PostfixUnaryExpressionContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_KotlinTranslator::visitPostfixUnarySuffix(KotlinParser::PostfixUnarySuffixContext *ctx){
    if(!PostfixUnarySuffixContext_cls) PostfixUnarySuffixContext_cls = PyObject_GetAttrString(translator->parser_cls, "PostfixUnarySuffixContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, PostfixUnarySuffixContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_KotlinTranslator::visitDirectlyAssignableExpression(KotlinParser::DirectlyAssignableExpressionContext *ctx){
    if(!DirectlyAssignableExpressionContext_cls) DirectlyAssignableExpressionContext_cls = PyObject_GetAttrString(translator->parser_cls, "DirectlyAssignableExpressionContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, DirectlyAssignableExpressionContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_KotlinTranslator::visitParenthesizedDirectlyAssignableExpression(KotlinParser::ParenthesizedDirectlyAssignableExpressionContext *ctx){
    if(!ParenthesizedDirectlyAssignableExpressionContext_cls) ParenthesizedDirectlyAssignableExpressionContext_cls = PyObject_GetAttrString(translator->parser_cls, "ParenthesizedDirectlyAssignableExpressionContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, ParenthesizedDirectlyAssignableExpressionContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_KotlinTranslator::visitAssignableExpression(KotlinParser::AssignableExpressionContext *ctx){
    if(!AssignableExpressionContext_cls) AssignableExpressionContext_cls = PyObject_GetAttrString(translator->parser_cls, "AssignableExpressionContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, AssignableExpressionContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_KotlinTranslator::visitParenthesizedAssignableExpression(KotlinParser::ParenthesizedAssignableExpressionContext *ctx){
    if(!ParenthesizedAssignableExpressionContext_cls) ParenthesizedAssignableExpressionContext_cls = PyObject_GetAttrString(translator->parser_cls, "ParenthesizedAssignableExpressionContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, ParenthesizedAssignableExpressionContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_KotlinTranslator::visitAssignableSuffix(KotlinParser::AssignableSuffixContext *ctx){
    if(!AssignableSuffixContext_cls) AssignableSuffixContext_cls = PyObject_GetAttrString(translator->parser_cls, "AssignableSuffixContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, AssignableSuffixContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_KotlinTranslator::visitIndexingSuffix(KotlinParser::IndexingSuffixContext *ctx){
    if(!IndexingSuffixContext_cls) IndexingSuffixContext_cls = PyObject_GetAttrString(translator->parser_cls, "IndexingSuffixContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, IndexingSuffixContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_KotlinTranslator::visitNavigationSuffix(KotlinParser::NavigationSuffixContext *ctx){
    if(!NavigationSuffixContext_cls) NavigationSuffixContext_cls = PyObject_GetAttrString(translator->parser_cls, "NavigationSuffixContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, NavigationSuffixContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_KotlinTranslator::visitCallSuffix(KotlinParser::CallSuffixContext *ctx){
    if(!CallSuffixContext_cls) CallSuffixContext_cls = PyObject_GetAttrString(translator->parser_cls, "CallSuffixContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, CallSuffixContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_KotlinTranslator::visitAnnotatedLambda(KotlinParser::AnnotatedLambdaContext *ctx){
    if(!AnnotatedLambdaContext_cls) AnnotatedLambdaContext_cls = PyObject_GetAttrString(translator->parser_cls, "AnnotatedLambdaContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, AnnotatedLambdaContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_KotlinTranslator::visitTypeArguments(KotlinParser::TypeArgumentsContext *ctx){
    if(!TypeArgumentsContext_cls) TypeArgumentsContext_cls = PyObject_GetAttrString(translator->parser_cls, "TypeArgumentsContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, TypeArgumentsContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_KotlinTranslator::visitValueArguments(KotlinParser::ValueArgumentsContext *ctx){
    if(!ValueArgumentsContext_cls) ValueArgumentsContext_cls = PyObject_GetAttrString(translator->parser_cls, "ValueArgumentsContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, ValueArgumentsContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_KotlinTranslator::visitValueArgument(KotlinParser::ValueArgumentContext *ctx){
    if(!ValueArgumentContext_cls) ValueArgumentContext_cls = PyObject_GetAttrString(translator->parser_cls, "ValueArgumentContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, ValueArgumentContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_KotlinTranslator::visitPrimaryExpression(KotlinParser::PrimaryExpressionContext *ctx){
    if(!PrimaryExpressionContext_cls) PrimaryExpressionContext_cls = PyObject_GetAttrString(translator->parser_cls, "PrimaryExpressionContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, PrimaryExpressionContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_KotlinTranslator::visitParenthesizedExpression(KotlinParser::ParenthesizedExpressionContext *ctx){
    if(!ParenthesizedExpressionContext_cls) ParenthesizedExpressionContext_cls = PyObject_GetAttrString(translator->parser_cls, "ParenthesizedExpressionContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, ParenthesizedExpressionContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_KotlinTranslator::visitCollectionLiteral(KotlinParser::CollectionLiteralContext *ctx){
    if(!CollectionLiteralContext_cls) CollectionLiteralContext_cls = PyObject_GetAttrString(translator->parser_cls, "CollectionLiteralContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, CollectionLiteralContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_KotlinTranslator::visitLiteralConstant(KotlinParser::LiteralConstantContext *ctx){
    if(!LiteralConstantContext_cls) LiteralConstantContext_cls = PyObject_GetAttrString(translator->parser_cls, "LiteralConstantContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, LiteralConstantContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_KotlinTranslator::visitStringLiteral(KotlinParser::StringLiteralContext *ctx){
    if(!StringLiteralContext_cls) StringLiteralContext_cls = PyObject_GetAttrString(translator->parser_cls, "StringLiteralContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, StringLiteralContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_KotlinTranslator::visitLineStringLiteral(KotlinParser::LineStringLiteralContext *ctx){
    if(!LineStringLiteralContext_cls) LineStringLiteralContext_cls = PyObject_GetAttrString(translator->parser_cls, "LineStringLiteralContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, LineStringLiteralContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_KotlinTranslator::visitMultiLineStringLiteral(KotlinParser::MultiLineStringLiteralContext *ctx){
    if(!MultiLineStringLiteralContext_cls) MultiLineStringLiteralContext_cls = PyObject_GetAttrString(translator->parser_cls, "MultiLineStringLiteralContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, MultiLineStringLiteralContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_KotlinTranslator::visitLineStringContent(KotlinParser::LineStringContentContext *ctx){
    if(!LineStringContentContext_cls) LineStringContentContext_cls = PyObject_GetAttrString(translator->parser_cls, "LineStringContentContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, LineStringContentContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_KotlinTranslator::visitLineStringExpression(KotlinParser::LineStringExpressionContext *ctx){
    if(!LineStringExpressionContext_cls) LineStringExpressionContext_cls = PyObject_GetAttrString(translator->parser_cls, "LineStringExpressionContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, LineStringExpressionContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_KotlinTranslator::visitMultiLineStringContent(KotlinParser::MultiLineStringContentContext *ctx){
    if(!MultiLineStringContentContext_cls) MultiLineStringContentContext_cls = PyObject_GetAttrString(translator->parser_cls, "MultiLineStringContentContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, MultiLineStringContentContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_KotlinTranslator::visitMultiLineStringExpression(KotlinParser::MultiLineStringExpressionContext *ctx){
    if(!MultiLineStringExpressionContext_cls) MultiLineStringExpressionContext_cls = PyObject_GetAttrString(translator->parser_cls, "MultiLineStringExpressionContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, MultiLineStringExpressionContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_KotlinTranslator::visitLambdaLiteral(KotlinParser::LambdaLiteralContext *ctx){
    if(!LambdaLiteralContext_cls) LambdaLiteralContext_cls = PyObject_GetAttrString(translator->parser_cls, "LambdaLiteralContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, LambdaLiteralContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_KotlinTranslator::visitLambdaParameters(KotlinParser::LambdaParametersContext *ctx){
    if(!LambdaParametersContext_cls) LambdaParametersContext_cls = PyObject_GetAttrString(translator->parser_cls, "LambdaParametersContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, LambdaParametersContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_KotlinTranslator::visitLambdaParameter(KotlinParser::LambdaParameterContext *ctx){
    if(!LambdaParameterContext_cls) LambdaParameterContext_cls = PyObject_GetAttrString(translator->parser_cls, "LambdaParameterContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, LambdaParameterContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_KotlinTranslator::visitAnonymousFunction(KotlinParser::AnonymousFunctionContext *ctx){
    if(!AnonymousFunctionContext_cls) AnonymousFunctionContext_cls = PyObject_GetAttrString(translator->parser_cls, "AnonymousFunctionContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, AnonymousFunctionContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_KotlinTranslator::visitFunctionLiteral(KotlinParser::FunctionLiteralContext *ctx){
    if(!FunctionLiteralContext_cls) FunctionLiteralContext_cls = PyObject_GetAttrString(translator->parser_cls, "FunctionLiteralContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, FunctionLiteralContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_KotlinTranslator::visitObjectLiteral(KotlinParser::ObjectLiteralContext *ctx){
    if(!ObjectLiteralContext_cls) ObjectLiteralContext_cls = PyObject_GetAttrString(translator->parser_cls, "ObjectLiteralContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, ObjectLiteralContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_KotlinTranslator::visitThisExpression(KotlinParser::ThisExpressionContext *ctx){
    if(!ThisExpressionContext_cls) ThisExpressionContext_cls = PyObject_GetAttrString(translator->parser_cls, "ThisExpressionContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, ThisExpressionContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_KotlinTranslator::visitSuperExpression(KotlinParser::SuperExpressionContext *ctx){
    if(!SuperExpressionContext_cls) SuperExpressionContext_cls = PyObject_GetAttrString(translator->parser_cls, "SuperExpressionContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, SuperExpressionContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_KotlinTranslator::visitIfExpression(KotlinParser::IfExpressionContext *ctx){
    if(!IfExpressionContext_cls) IfExpressionContext_cls = PyObject_GetAttrString(translator->parser_cls, "IfExpressionContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, IfExpressionContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_KotlinTranslator::visitWhenSubject(KotlinParser::WhenSubjectContext *ctx){
    if(!WhenSubjectContext_cls) WhenSubjectContext_cls = PyObject_GetAttrString(translator->parser_cls, "WhenSubjectContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, WhenSubjectContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_KotlinTranslator::visitWhenExpression(KotlinParser::WhenExpressionContext *ctx){
    if(!WhenExpressionContext_cls) WhenExpressionContext_cls = PyObject_GetAttrString(translator->parser_cls, "WhenExpressionContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, WhenExpressionContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_KotlinTranslator::visitWhenEntry(KotlinParser::WhenEntryContext *ctx){
    if(!WhenEntryContext_cls) WhenEntryContext_cls = PyObject_GetAttrString(translator->parser_cls, "WhenEntryContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, WhenEntryContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_KotlinTranslator::visitWhenCondition(KotlinParser::WhenConditionContext *ctx){
    if(!WhenConditionContext_cls) WhenConditionContext_cls = PyObject_GetAttrString(translator->parser_cls, "WhenConditionContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, WhenConditionContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_KotlinTranslator::visitRangeTest(KotlinParser::RangeTestContext *ctx){
    if(!RangeTestContext_cls) RangeTestContext_cls = PyObject_GetAttrString(translator->parser_cls, "RangeTestContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, RangeTestContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_KotlinTranslator::visitTypeTest(KotlinParser::TypeTestContext *ctx){
    if(!TypeTestContext_cls) TypeTestContext_cls = PyObject_GetAttrString(translator->parser_cls, "TypeTestContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, TypeTestContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_KotlinTranslator::visitTryExpression(KotlinParser::TryExpressionContext *ctx){
    if(!TryExpressionContext_cls) TryExpressionContext_cls = PyObject_GetAttrString(translator->parser_cls, "TryExpressionContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, TryExpressionContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_KotlinTranslator::visitCatchBlock(KotlinParser::CatchBlockContext *ctx){
    if(!CatchBlockContext_cls) CatchBlockContext_cls = PyObject_GetAttrString(translator->parser_cls, "CatchBlockContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, CatchBlockContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_KotlinTranslator::visitFinallyBlock(KotlinParser::FinallyBlockContext *ctx){
    if(!FinallyBlockContext_cls) FinallyBlockContext_cls = PyObject_GetAttrString(translator->parser_cls, "FinallyBlockContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, FinallyBlockContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_KotlinTranslator::visitJumpExpression(KotlinParser::JumpExpressionContext *ctx){
    if(!JumpExpressionContext_cls) JumpExpressionContext_cls = PyObject_GetAttrString(translator->parser_cls, "JumpExpressionContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, JumpExpressionContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_KotlinTranslator::visitCallableReference(KotlinParser::CallableReferenceContext *ctx){
    if(!CallableReferenceContext_cls) CallableReferenceContext_cls = PyObject_GetAttrString(translator->parser_cls, "CallableReferenceContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, CallableReferenceContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_KotlinTranslator::visitAssignmentAndOperator(KotlinParser::AssignmentAndOperatorContext *ctx){
    if(!AssignmentAndOperatorContext_cls) AssignmentAndOperatorContext_cls = PyObject_GetAttrString(translator->parser_cls, "AssignmentAndOperatorContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, AssignmentAndOperatorContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_KotlinTranslator::visitEqualityOperator(KotlinParser::EqualityOperatorContext *ctx){
    if(!EqualityOperatorContext_cls) EqualityOperatorContext_cls = PyObject_GetAttrString(translator->parser_cls, "EqualityOperatorContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, EqualityOperatorContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_KotlinTranslator::visitComparisonOperator(KotlinParser::ComparisonOperatorContext *ctx){
    if(!ComparisonOperatorContext_cls) ComparisonOperatorContext_cls = PyObject_GetAttrString(translator->parser_cls, "ComparisonOperatorContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, ComparisonOperatorContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_KotlinTranslator::visitInOperator(KotlinParser::InOperatorContext *ctx){
    if(!InOperatorContext_cls) InOperatorContext_cls = PyObject_GetAttrString(translator->parser_cls, "InOperatorContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, InOperatorContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_KotlinTranslator::visitIsOperator(KotlinParser::IsOperatorContext *ctx){
    if(!IsOperatorContext_cls) IsOperatorContext_cls = PyObject_GetAttrString(translator->parser_cls, "IsOperatorContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, IsOperatorContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_KotlinTranslator::visitAdditiveOperator(KotlinParser::AdditiveOperatorContext *ctx){
    if(!AdditiveOperatorContext_cls) AdditiveOperatorContext_cls = PyObject_GetAttrString(translator->parser_cls, "AdditiveOperatorContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, AdditiveOperatorContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_KotlinTranslator::visitMultiplicativeOperator(KotlinParser::MultiplicativeOperatorContext *ctx){
    if(!MultiplicativeOperatorContext_cls) MultiplicativeOperatorContext_cls = PyObject_GetAttrString(translator->parser_cls, "MultiplicativeOperatorContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, MultiplicativeOperatorContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_KotlinTranslator::visitAsOperator(KotlinParser::AsOperatorContext *ctx){
    if(!AsOperatorContext_cls) AsOperatorContext_cls = PyObject_GetAttrString(translator->parser_cls, "AsOperatorContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, AsOperatorContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_KotlinTranslator::visitPrefixUnaryOperator(KotlinParser::PrefixUnaryOperatorContext *ctx){
    if(!PrefixUnaryOperatorContext_cls) PrefixUnaryOperatorContext_cls = PyObject_GetAttrString(translator->parser_cls, "PrefixUnaryOperatorContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, PrefixUnaryOperatorContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_KotlinTranslator::visitPostfixUnaryOperator(KotlinParser::PostfixUnaryOperatorContext *ctx){
    if(!PostfixUnaryOperatorContext_cls) PostfixUnaryOperatorContext_cls = PyObject_GetAttrString(translator->parser_cls, "PostfixUnaryOperatorContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, PostfixUnaryOperatorContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_KotlinTranslator::visitExcl(KotlinParser::ExclContext *ctx){
    if(!ExclContext_cls) ExclContext_cls = PyObject_GetAttrString(translator->parser_cls, "ExclContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, ExclContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_KotlinTranslator::visitMemberAccessOperator(KotlinParser::MemberAccessOperatorContext *ctx){
    if(!MemberAccessOperatorContext_cls) MemberAccessOperatorContext_cls = PyObject_GetAttrString(translator->parser_cls, "MemberAccessOperatorContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, MemberAccessOperatorContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_KotlinTranslator::visitSafeNav(KotlinParser::SafeNavContext *ctx){
    if(!SafeNavContext_cls) SafeNavContext_cls = PyObject_GetAttrString(translator->parser_cls, "SafeNavContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, SafeNavContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_KotlinTranslator::visitModifiers(KotlinParser::ModifiersContext *ctx){
    if(!ModifiersContext_cls) ModifiersContext_cls = PyObject_GetAttrString(translator->parser_cls, "ModifiersContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, ModifiersContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_KotlinTranslator::visitParameterModifiers(KotlinParser::ParameterModifiersContext *ctx){
    if(!ParameterModifiersContext_cls) ParameterModifiersContext_cls = PyObject_GetAttrString(translator->parser_cls, "ParameterModifiersContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, ParameterModifiersContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_KotlinTranslator::visitModifier(KotlinParser::ModifierContext *ctx){
    if(!ModifierContext_cls) ModifierContext_cls = PyObject_GetAttrString(translator->parser_cls, "ModifierContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, ModifierContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_KotlinTranslator::visitTypeModifiers(KotlinParser::TypeModifiersContext *ctx){
    if(!TypeModifiersContext_cls) TypeModifiersContext_cls = PyObject_GetAttrString(translator->parser_cls, "TypeModifiersContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, TypeModifiersContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_KotlinTranslator::visitTypeModifier(KotlinParser::TypeModifierContext *ctx){
    if(!TypeModifierContext_cls) TypeModifierContext_cls = PyObject_GetAttrString(translator->parser_cls, "TypeModifierContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, TypeModifierContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_KotlinTranslator::visitClassModifier(KotlinParser::ClassModifierContext *ctx){
    if(!ClassModifierContext_cls) ClassModifierContext_cls = PyObject_GetAttrString(translator->parser_cls, "ClassModifierContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, ClassModifierContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_KotlinTranslator::visitMemberModifier(KotlinParser::MemberModifierContext *ctx){
    if(!MemberModifierContext_cls) MemberModifierContext_cls = PyObject_GetAttrString(translator->parser_cls, "MemberModifierContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, MemberModifierContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_KotlinTranslator::visitVisibilityModifier(KotlinParser::VisibilityModifierContext *ctx){
    if(!VisibilityModifierContext_cls) VisibilityModifierContext_cls = PyObject_GetAttrString(translator->parser_cls, "VisibilityModifierContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, VisibilityModifierContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_KotlinTranslator::visitVarianceModifier(KotlinParser::VarianceModifierContext *ctx){
    if(!VarianceModifierContext_cls) VarianceModifierContext_cls = PyObject_GetAttrString(translator->parser_cls, "VarianceModifierContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, VarianceModifierContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_KotlinTranslator::visitTypeParameterModifiers(KotlinParser::TypeParameterModifiersContext *ctx){
    if(!TypeParameterModifiersContext_cls) TypeParameterModifiersContext_cls = PyObject_GetAttrString(translator->parser_cls, "TypeParameterModifiersContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, TypeParameterModifiersContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_KotlinTranslator::visitTypeParameterModifier(KotlinParser::TypeParameterModifierContext *ctx){
    if(!TypeParameterModifierContext_cls) TypeParameterModifierContext_cls = PyObject_GetAttrString(translator->parser_cls, "TypeParameterModifierContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, TypeParameterModifierContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_KotlinTranslator::visitFunctionModifier(KotlinParser::FunctionModifierContext *ctx){
    if(!FunctionModifierContext_cls) FunctionModifierContext_cls = PyObject_GetAttrString(translator->parser_cls, "FunctionModifierContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, FunctionModifierContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_KotlinTranslator::visitPropertyModifier(KotlinParser::PropertyModifierContext *ctx){
    if(!PropertyModifierContext_cls) PropertyModifierContext_cls = PyObject_GetAttrString(translator->parser_cls, "PropertyModifierContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, PropertyModifierContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_KotlinTranslator::visitInheritanceModifier(KotlinParser::InheritanceModifierContext *ctx){
    if(!InheritanceModifierContext_cls) InheritanceModifierContext_cls = PyObject_GetAttrString(translator->parser_cls, "InheritanceModifierContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, InheritanceModifierContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_KotlinTranslator::visitParameterModifier(KotlinParser::ParameterModifierContext *ctx){
    if(!ParameterModifierContext_cls) ParameterModifierContext_cls = PyObject_GetAttrString(translator->parser_cls, "ParameterModifierContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, ParameterModifierContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_KotlinTranslator::visitReificationModifier(KotlinParser::ReificationModifierContext *ctx){
    if(!ReificationModifierContext_cls) ReificationModifierContext_cls = PyObject_GetAttrString(translator->parser_cls, "ReificationModifierContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, ReificationModifierContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_KotlinTranslator::visitPlatformModifier(KotlinParser::PlatformModifierContext *ctx){
    if(!PlatformModifierContext_cls) PlatformModifierContext_cls = PyObject_GetAttrString(translator->parser_cls, "PlatformModifierContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, PlatformModifierContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_KotlinTranslator::visitAnnotation(KotlinParser::AnnotationContext *ctx){
    if(!AnnotationContext_cls) AnnotationContext_cls = PyObject_GetAttrString(translator->parser_cls, "AnnotationContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, AnnotationContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_KotlinTranslator::visitSingleAnnotation(KotlinParser::SingleAnnotationContext *ctx){
    if(!SingleAnnotationContext_cls) SingleAnnotationContext_cls = PyObject_GetAttrString(translator->parser_cls, "SingleAnnotationContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, SingleAnnotationContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_KotlinTranslator::visitMultiAnnotation(KotlinParser::MultiAnnotationContext *ctx){
    if(!MultiAnnotationContext_cls) MultiAnnotationContext_cls = PyObject_GetAttrString(translator->parser_cls, "MultiAnnotationContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, MultiAnnotationContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_KotlinTranslator::visitAnnotationUseSiteTarget(KotlinParser::AnnotationUseSiteTargetContext *ctx){
    if(!AnnotationUseSiteTargetContext_cls) AnnotationUseSiteTargetContext_cls = PyObject_GetAttrString(translator->parser_cls, "AnnotationUseSiteTargetContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, AnnotationUseSiteTargetContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_KotlinTranslator::visitUnescapedAnnotation(KotlinParser::UnescapedAnnotationContext *ctx){
    if(!UnescapedAnnotationContext_cls) UnescapedAnnotationContext_cls = PyObject_GetAttrString(translator->parser_cls, "UnescapedAnnotationContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, UnescapedAnnotationContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_KotlinTranslator::visitSimpleIdentifier(KotlinParser::SimpleIdentifierContext *ctx){
    if(!SimpleIdentifierContext_cls) SimpleIdentifierContext_cls = PyObject_GetAttrString(translator->parser_cls, "SimpleIdentifierContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, SimpleIdentifierContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_KotlinTranslator::visitIdentifier(KotlinParser::IdentifierContext *ctx){
    if(!IdentifierContext_cls) IdentifierContext_cls = PyObject_GetAttrString(translator->parser_cls, "IdentifierContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, IdentifierContext_cls);
    return py_ctx;
}
